server:
  port: 8000
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# 파일 리턴 기본경로 src/main/resources/static
# 스프링부트에서는 기본적으로 jsp를 지원하지 않는다.
# Japser를 사용하면 자동으로 경로가 webapp으로 잡힌다.
# 따라서 webapp 디렉토리를 따로 만들어줘야한다.
#spring:
#  mvc:
#    view:
#      prefix: /WEB-INF/views/
#      suffix: .jsp

spring:
  thymeleaf:
    cache: false # 서버에 캐싱이 되지 않도록 설정, true면 매번 다시 시작 해야 함

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver # mysql 6.x 이상부터 cj를 붙인다.
    url: jdbc:mysql://localhost:3306/blog?serverTimezone=Asia/Seoul # DB 접속 주소
    username: cos
    password: cos1234

  jpa:
    open-in-view: true
    hibernate:
      ddl-auto: update
      naming:
        # 테이블을 만들 때 엔티티 변수명을 그대로 쓴다.
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#        테이블을 만들 때 변수명에 언더 스코어(_)를 붙여준다.
#        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
      use-new-id-generator-mappings: false # JPA에서 제공하는 기본 넘버링 전략을 false
    show-sql: true # 콘솔창에 sql문을 보여줌
    properties:
      hibernate.format_sql: true # 콘솔창에 sql문을 정렬해서 보여줌

  jackson:
    serialization:
      fail-on-empty-beans: false

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 416219118541-su72s337gtj940h2b0dsfk8cru4r7ev4.apps.googleusercontent.com
            client-secret: hb30DU-nEvYPWCP7fQBr95bC
            scope:
              - email
              - profile

          facebook:
            client-id: 880572366107441
            client-secret: fb3d02014f966f74d5c9dca4568992d5
            scope:
              - email
              - public_profile

          naver:
            client-id: J82xq8JIGMGJ3GdoSKWt
            client-secret: DUdph7rbOg
            scope:
              - name
              - email
            client-name: Naver # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8000/login/oauth2/code/naver

          kakao:
            client-id: 4245e3f4d62ac237490586308dc9b0e7
            client-secret: vmj2MsEF3351P9oYsIGVby3SAvxE87WC
            scope:
              - profile
              - account_email
            client-name: Kakao
            client-authentication-method: POST
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8000/login/oauth2/code/kakao

        # 네이버, 카카오는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
        # 요청주소도 다르고, 응답 데이터도 다르기 때문이다.
        # https://developers.naver.com/docs/login/devguide/#2-2-1-%EC%86%8C%EC%85%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8
        # https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원정보를 json의 response 키값으로 리턴해줌.

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id # id로 안하면... 고생함
cos:
  key: 32k*n3l1@f$))%klsa!n(f9d8s2k43^sdaf%%@(@)nk7ds5v

